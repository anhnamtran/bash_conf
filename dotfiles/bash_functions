# Checks if the current shell is a TMUX session.
check_tmux() {
  # Only echoes if CHECK_TMUX is set to "true."
  if [[ ${CHECK_TMUX:-false} == "true" ]] && [[ -z "$TMUX" ]]; then
    echo "Not In TMUX."
  fi
}

# extract several common file types.
extract() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
  else
    for file in "$@"
    do
      if [ -f "$file" ]; then
        case "${file}" in
          *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
             tar xvf "$file"
             ;;
          *.lzma)
            unlzma ./"$file"
            ;;
          *.bz2)
            bunzip2 ./"$file"
            ;;
          *.cbr|*.rar)
            unrar x -ad ./"$file"
            ;;
          *.gz)
            gunzip ./"$file"
            ;;
          *.cbz|*.epub|*.zip)
            unzip ./"$file"
            ;;
          *.z)
            uncompress
            ./"$file"
            ;;
          *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
             7z x ./"$file"
             ;;
          *.xz)
            unxz ./"$file"
            ;;
          *.exe)
            cabextract ./"$file"
            ;;
          *.cpio)
            cpio -id < ./"$file"
            ;;
          *.cba|*.ace)
            unace x ./"$file"
            ;;
          *)
             echo "extract: '$file' - unknown archive method"
             return 1
             ;;
        esac
      else
        echo "'$file' - file does not exist"
        return 1
      fi
    done
  fi
}

# Convert spaces in filename to underscores.
no_space() {
  find -name "$@" -print0 | sort -rz | \
    while read -d $'\0' f; do \
      mv -v "$f" "$(dirname "$f")/$(basename "${f// /_}")"; done
}

CONFIGS_GIT_DIR="${CONFIGS_GIT_DIR:-"$HOME/.cfg"}"

# Enables git autocompletion if $CONFIGS_GIT_DIR if present.
if [[ -d "$CONFIGS_GIT_DIR" ]]; then
  # load bash-completion if necessary
  declare -F _completion_loader &>/dev/null || {
    if [ -f /usr/share/bash-completion/bash_completion ]; then
      . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
      . /etc/bash_completion
    fi
  }

  # Check again if for some reason _completion_loader is still not loaded.
  declare -F _completion_loader &>/dev/null || {
    [[ "$PWD" == "$HOME" ]] && echo "Completion for configs unable to load."
    return 1
  }

  _completion_loader git
  eval "$(complete -p git | sed -r 's/(\s)git$/\1configs/')"
fi

configs() {
  git --git-dir="$CONFIGS_GIT_DIR" --work-tree="$HOME" "$@"
}

pac-list() {
  sudo pacman -Qqqn > ~/nat-pac-list
  sudo pacman -Qqqm > ~/aur-pac-list
}

tmux-is() {
  mode="$1"
  options="local, server"
  case $mode in
    "local"|"lo")
      touch /tmp/.tmux_local_mode
      ;;
    "server"|"se")
      if [[ -f /tmp/.tmux_local_mode ]]; then
        rm -f /tmp/.tmux_local_mode
      fi
      ;;
    "status"|"st")
      if [[ -f /tmp/.tmux_local_mode ]]; then
        echo "TMUX mode is currently \"local\""
      else
        echo "TMUX mode is currently \"server\""
      fi
      return 0
      ;;
    *)
      echo "Unknown mode, options are {$options}"
      return 1
      ;;
  esac
  echo "TMUX mode is now \"$mode\""
}

# vim: ft=sh
