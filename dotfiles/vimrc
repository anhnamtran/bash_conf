set nocompatible              " be iMproved, required

set nocompatible              " be iMproved, required
set encoding=utf-8
filetype off                  " required

" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/bundle')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" Plugins

" Themes
Plug 'navarasu/onedark.nvim'

" GUIs elements
Plug 'nvim-lualine/lualine.nvim'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-startify'

if has('nvim')
  Plug 'lukas-reineke/indent-blankline.nvim' " requires neovim v0.5+
  Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }
else
  Plug 'Yggdroot/indentLine'
endif

" Syntax handling
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'bfrg/vim-cpp-modern'
Plug 'dag/vim-fish'
Plug 'plasticboy/vim-markdown'
Plug 'elzr/vim-json'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'tpope/vim-git'
Plug 'othree/html5.vim'
Plug 'vim-python/python-syntax'
Plug 'pboettch/vim-cmake-syntax'
Plug 'rust-lang/rust.vim'
Plug 'MTDL9/vim-log-highlighting'
Plug 'arzg/vim-sh'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'fladson/vim-kitty', { 'branch': 'main' }
Plug 'tridactyl/vim-tridactyl'

if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
endif

Plug 'neoclide/coc.nvim', { 'branch': 'release', 'do': ':CocUpdate' }

" System navigation
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }

" Session tracking
Plug 'tpope/vim-obsession'

" Utility
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'szw/vim-maximizer'
Plug 'inkarkat/vim-mark'
Plug 'inkarkat/vim-ingo-library'
Plug 'jiangmiao/auto-pairs'
Plug 'easymotion/vim-easymotion'
Plug 'psliwka/vim-smoothie'

" Vim wiki
Plug 'vimwiki/vimwiki'

" All of your Plugins must be added before the following line
call plug#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"--------------------end Vundle setup

" -------------------------------- SETTINGS -----------------------------------
" View `man` pages and add new file types
runtime ftplugin/man.vim

" Treesitter
if has('nvim')
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { 'c', 'cpp', 'bash', 'vim', 'json', 'python', 'go', 'comment', 'rust' },
  highlight = {
    enable = true,              -- false will disable the whole extension
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = true,
  },
}
EOF
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
endif

" Enable rainbow parentheses
let g:rainbow#max_level = 24
let g:rainbow#blacklist = [ 248, 238, 59, 10, 1 ]
let g:rainbow#pairs = [ ['(', ')'], ['[', ']'], ['{', '}'] ]
function! s:disable_rainbow_for_type()
   let l:filesuffix_denylist = ['log', 'qt', 'wiki']
   if index(l:filesuffix_denylist, expand('%:e')) != -1
      call rainbow_parentheses#deactivate()
   else
      call rainbow_parentheses#activate()
   endif
endfunction
augroup RainbowCustomAu
   au!
   autocmd! BufRead,BufNewFile * call s:disable_rainbow_for_type()
augroup END

set nofoldenable

" Obsession and session management
let g:sessions_dir = '~/.vim/session'
let g:sessionoptions = 'buffers,curdir,folds,help,tabpages,winsize'

exec 'nnoremap <leader>ss :Obsession! ' . g:sessions_dir . '/*.vim<C-D><Left><Left><Left><Left><BS>'
exec 'nnoremap <leader>sr :so ' . g:sessions_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
nnoremap <leader>sp :Obsession<CR>
nnoremap <leader>sc :echo v:this_session<CR>
nnoremap <leader>sl :exec 'mksession!' . v:this_session<CR>
nnoremap <leader>sd :Obsession!<CR>

" startify
let g:startify_session_dir = g:sessions_dir
let g:startify_ascii_header = [
      \ ' █████╗  ███╗   ██╗ ██████╗  ██████╗  ███████╗ ██╗    ██╗',
      \ '██╔══██╗ ████╗  ██║ ██╔══██╗ ██╔══██╗ ██╔════╝ ██║    ██║',
      \ '███████║ ██╔██╗ ██║ ██║  ██║ ██████╔╝ █████╗   ██║ █╗ ██║',
      \ '██╔══██║ ██║╚██╗██║ ██║  ██║ ██╔══██╗ ██╔══╝   ██║███╗██║',
      \ '██║  ██║ ██║ ╚████║ ██████╔╝ ██║  ██║ ███████╗ ╚███╔███╔╝',
      \ '╚═╝  ╚═╝ ╚═╝  ╚═══╝ ╚═════╝  ╚═╝  ╚═╝ ╚══════╝  ╚══╝╚══╝',
      \]
let g:startify_custom_header = startify#pad(g:startify_ascii_header)
let g:startify_lists = [
      \ { 'type': 'commands',  'header': ['   Commands']        },
      \ { 'type': 'sessions',  'header': ['   Sessions']        },
      \ { 'type': 'files',     'header': ['   FILES']           },
      \ { 'type': 'dir',       'header': ['   DIRS '. getcwd()] },
      \ ]
let g:startify_commands = [
      \ {'v': ['vimrc', 'e ~/.vimrc']},
      \ {'P': ['Update plugins', 'PlugUpdate']},
      \ {'w': ['VimWiki Index', 'VimwikiIndex']},
      \ {'d': ['VimWiki Diary', 'VimwikiDiary']},
      \ {'D': ['VimWiki Diary Index', 'VimwikiDiaryIndex']},
      \ ]

" vim-smoothie
let g:smoothie_update_interval = 1
let g:smoothie_speed_constant_factor = 20
let g:smoothie_speed_linear_factor = 20
let g:smoothie_speed_exponentiation_factor = 0.5


" Enhanced CPP highlight options
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_member_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_attributes_highlight = 1

" Python highlighting options
let g:python_highlight_class_vars = 1
let g:python_highlight_func_calls = 1
let g:python_highlight_string_formatting = 1
let g:python_highlight_string_format = 1
let g:python_highlight_exceptions = 1

" NERDTree
let g:NERDTreeSortHiddenFirst = 1
let g:NERDTreeQuitOnOpen = 1

" coc.nvim
function! s:disable_coc_for_type()
  let l:filesuffix_denylist = ['log', 'qt']
	if index(l:filesuffix_denylist, expand('%:e')) != -1
	  let b:coc_enabled = 0
	endif
endfunction
augroup CocCustomAu
  au!
  autocmd! BufRead,BufNewFile * call s:disable_coc_for_type()
  autocmd! BufEnter,FocusGained * silent call CocActionAsync("ensureDocument")
  autocmd! BufEnter,FocusGained * silent call CocActionAsync("refreshSource")
  autocmd! FileType json,cpp,vim,tacc,python setl formatexpr=CocAction('formatSelected')
augroup END

autocmd CursorHold * silent call CocActionAsync('highlight')

set tagfunc=CocTagFunc

let g:coc_global_extension = [
\  'coc-yaml',
\  'coc-vimlsp',
\  'coc-tsserver',
\  'coc-sh',
\  'coc-pyright',
\  'coc-json',
\  'coc-jedi',
\  'coc-html',
\  'coc-css',
\  'coc-clangd',
\  'coc-fish',
\  'coc-spell-checker',
\  'coc-rust-analyzer',
\]

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.

" remap all Coc's <Plug> mappings to use CocActionAsync
nnoremap <Plug>(coc-definition) :CocActionAsync('jumpDefinition')
nnoremap <Plug>(coc-type-definition) :CocActionAsync('jumpTypeDefinition')
nnoremap <Plug>(coc-implementation) :CocActionAsync('jumpImplementation')
nnoremap <Plug>(coc-references) :CocActionAsync('jumpReferences')
nnoremap <Plug>(coc-rename) :CocActionAsync('rename')
nnoremap <Plug>(coc-codeaction) :CocActionAsync('codeAction', '')
nnoremap <Plug>(coc-codeaction-cursor) :CocActionAsync('codeAction', 'cursor')

" vim-mark
let g:mwDefaultHighlightingPalette = 'maximum'

" vim-easymotion
let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_verbose = 0
map ; <Plug>(easymotion-prefix)

if has('nvim')
" nvim indent_blankline
lua <<EOF
require("indent_blankline").setup {
    char = "▏",
    buftype_exclude = { "terminal", "help" },
    filetype_exclude = { "vimwiki", "markdown" },
    use_treesitter = true,
    show_current_context = true,
}
EOF
hi! link IndentBlankLineChar NonText
else
" indentLine
let g:indentLine_char = '▏'
let g:indentLine_defaultGroup = 'NonText'
let g:indentLine_concealcursor = 'nc'
let g:indentLine_conceallevel = 2
let g:indentLine_bufTypeExclude = [ 'help', 'terminal' ]
let g:indentLine_fileTypeExclude = [ 'vimwiki', 'markdown', 'log' ]
endif

" lualine.nvim
if has('nvim')
function! LuaLineWinNum()
  return tabpagewinnr(tabpagenr())
endfunction
function! LuaLineObsession()
  return ObsessionStatus("$", "")
endfunction
lua <<EOF
require("lualine").setup {
  options = {
    theme = 'onedark',
  },
  sections = {
    lualine_a = { 'LuaLineWinNum', 'mode' },
    lualine_b = { 'branch', 'diff' },
    lualine_c = { 'filename', 'b:coc_current_function' },
    lualine_x = { 'diagnostics', 'filetype' },
    lualine_y = { 'progress' },
    lualine_z = { 'location', 'LuaLineObsession' }
  },
  inactive_sections = {
    lualine_a = { 'LuaLineWinNum' },
    lualine_b = {},
    lualine_c = { 'filename', 'b:coc_current_function' },
    lualine_x = { 'location' },
    lualine_y = {},
    lualine_z = { 'LuaLineObsession' }
  },
  tabline = {
    lualine_a = {
      { 'buffers', symbols = { alternate_file = '# ' } }
    },
    lualine_z = {
      { 'tabs', mode = 2 }
    },
  },
  extensions = { 'fugitive', 'fzf' }
}
EOF
endif
set wildmenu
set wildignorecase
set wildmode=longest,full

" Hexokinase
let g:Hexokinase_highlighters = [ 'virtual' ]
" update time
set updatetime=100

" Fugitive and GitGutter
" And diff options
set diffopt=filler,context:5
set foldopen-=search

" jumplist options
set jumpoptions+=stack

" line numbers
set number
" Don't show keys pressed
set noshowcmd

" split windows to the right instead
set splitright
set equalalways

" wrapping
set wrap linebreak nolist

" tabbing
set tabstop=2
set shiftwidth=2
set expandtab

" search highlighting
set hlsearch
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" indenting
set autoindent
set smarttab

" updates file automatically
set autoread

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter *
   \ if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "Buffer reloaded." | echohl None

" taking care of files with long lines
" this gives vim a seizure if there are too many long lines
set display+=lastline

" use mouse with tmux
set mouse=a

" enables local vimrc files
set exrc
set secure

" enables modeline
set modeline

" Set the timeout between mapped sequences and key codes
set timeoutlen=200
set ttimeoutlen=100

" Enable smart case searching
set ignorecase
set smartcase

" Make line numbers relative to current position
augroup WinRelNum
   autocmd WinEnter * set relativenumber
   autocmd FileType help set norelativenumber
   autocmd WinLeave * set norelativenumber
   autocmd BufWinEnter <buffer>  set relativenumber
augroup END

" make grep use ripgrep instead
set grepprg=rg\ --vimgrep
set grepformat^=%f:%l:%c:%m

set switchbuf=useopen,usetab,uselast

" --------------------------------- KEYMAPS -----------------------------------
"-------------------------------- INSERT MODE----------------------------------
" Ctrl-S to save
inoremap <c-s> <c-o>:w<CR>

" Replacing `esc` in insert mode
inoremap jj <ESC>
inoremap qq <ESC>:x<CR>

" quickly edit the previous typo
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

"---------------------------------- NORMAL MODE -------------------------------
nnoremap <CR> o<Esc>
augroup CRFix
   autocmd CmdwinEnter * nnoremap <CR> <CR>
   autocmd BufReadPost quickfix nnoremap <CR> <CR>
augroup END

" Ctrl+S to save
nnoremap <c-s> :w<CR><x><u>

" Tabs
nnoremap tl :tabn<CR>
nnoremap th :tabp<CR>
nnoremap tc :tabc<CR>

" Buffers
nnoremap H :bp<CR>
nnoremap L :bn<CR>
nnoremap <leader>q :bp <BAR> bd #<CR>
nnoremap <leader>ls :ls<CR>

" Remove trailing white spaces
nnoremap <silent> <F5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" Change current window's directory to current file's
nnoremap <leader>cd :lcd %:p:h<CR>

" FZF bindings. Requires fzf.vim
" Opens FZF in the current directory
nnoremap _ :Files %:p:h<CR>

nnoremap <leader>b :Buffers<CR>
nnoremap <leader>l :BLines<CR>
nnoremap <leader>w :Windows<CR>

nnoremap <leader>rN :set relativenumber!<CR>

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

 let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

nnoremap <C-w>; :wincmd p<CR>
nnoremap <C-w>z :MaximizerToggle<CR>

" NERDTree specific
nnoremap <C-n>n :NERDTreeToggle<CR>

"--------------------------------- TERM MODE ----------------------------------

tnoremap <Esc> <C-\><C-N>
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l

"------------------------------- COC.NVIM MAPPINGS ----------------------------------
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

" Code manipulation
nmap <silent> <leader>rn <Plug>(coc-rename)
nmap <silent> <leader>ca <Plug>(coc-codeaction-cursor)
vmap <silent> <leader>ca <Plug>(coc-codeaction-selected)
nmap <silent> <leader>cf :call CocActionAsync('quickfixes')<CR>
vmap <silent> <leader>cf :call CocActionAsync('quickfixes', 'visualmode')<CR>

" coc-spellchecker actions
nmap <silent> <leader>zg :CocCommand cSpell.addWordToUserDictionary<CR>
nmap <silent> <leader>zG :CocCommand cSpell.addWordToDictionary<CR>
nmap <silent> <leader>zi :CocCommand cSpell.addIgnoreWordToUser<CR>

" Show documentation
nnoremap <silent> <leader>h :call CocActionAsync('doHover')<cr>

" Formatting actions
" Format selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Tab completion
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" Insert <tab> when previous text is space, refresh completion if not.
inoremap <silent><expr> <TAB>
\ coc#pum#visible() ? coc#pum#next(1):
\ <SID>check_back_space() ? "\<Tab>" :
\ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" <CR> will confirm an item if something is selected, else, it'll just act like
" <Enter>
inoremap <silent><expr> <CR> coc#pum#visible() && coc#pum#info()['index'] < 0 ? "\<CR>" :
        \ coc#pum#visible() && coc#pum#info()['index'] != -1 ? coc#pum#confirm() :
        \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif


"------------------------------- EXTRA COMMANDS -------------------------------
command -nargs=+ Grip !grip --quiet <args> &

" automatically opens the quickfix and location windows on specific
" quick fix commands
command -nargs=+ Make make <args> | lwindow
command -nargs=+ Grep grep <args> | lwindow
command -nargs=+ Vim vim <args> | lwindow

" Turn a buffer into a scratch buffer
command Scratch setlocal buftype=nofile bufhidden=hide noswapfile nobuflisted
" show all highlight groups
command HighLights source $VIMRUNTIME/syntax/hitest.vim

"------------------------------ EXTRA FUNCTIONS -------------------------------
function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri != ""
    silent exec "!open '".s:uri."'"
  else
    echo "No URI found in line."
  endif
endfunction
map gx :call HandleURL()<cr>

function! DeleteInactiveBufs()
    "From tabpagebuflist() help, get a list of all buffers in all tabs
    let tablist = []
    for i in range(tabpagenr('$'))
        call extend(tablist, tabpagebuflist(i + 1))
    endfor

    "Below originally inspired by Hara Krishna Dara and Keith Roberts
    "http://tech.groups.yahoo.com/group/vim/message/56425
    let nWipeouts = 0
    for i in range(1, bufnr('$'))
        if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
        "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
            silent exec 'bwipeout' i
            let nWipeouts = nWipeouts + 1
        endif
    endfor
    echomsg nWipeouts . ' buffer(s) wiped out'
endfunction
command! OpenOnly :call DeleteInactiveBufs()
nnoremap <C-w>b :OpenOnly<CR>

command! -range PastePrint <line1>,<line2>w !cat

"-------------------------------- THEMES AND GUI ------------------------------

" Columns limits
" highlights the current line
set cursorline

" themes
" 24-bit colors
if &term =~ '256color'
  " disable Background Color Erase (BCE)
  set t_ut=
endif

if !has('nvim')
  set ttymouse=xterm2
endif

if has('termguicolors')
  set termguicolors
endif

syntax on

" Highlight trailing white spaces
augroup ExtraWhiteSpaceHi
  au!
  match DiffDelete /\s\+$/
  autocmd BufWinEnter * match DiffDelete /\s\+$/
  autocmd InsertEnter * match DiffDelete /\s\+\%#\@<!$/
  autocmd InsertLeave * match DiffDelete /\s\+$/
  autocmd BufWinLeave * call clearmatches()
augroup END

" Highlight BUGXXXX (case insensitive) within every file.
" BUG11111111: asdf
augroup ABug
  au!
  autocmd! Syntax * syn match bugNumber '\c\<BUG\d\+' contained containedin=.*Comment.* nextgroup=.*Comment.* nextgroup=.*Comment.*
  hi! default link bugNumber Error
augroup END

set textwidth=80
set colorcolumn=+0
augroup ActiveWin
  au!
  autocmd WinEnter * set colorcolumn=+0
  autocmd WinLeave * set colorcolumn=0
augroup END

set background=dark
colorscheme onedark

" Additional scheme and highliting changes

" Make popup menu nicer
if has('nvim')
  set pumblend=15
endif
hi! PmenuSel ctermfg=235 ctermbg=170 guifg=#282C34 guibg=#C678DD
hi! link CocHighlightText Title
hi! link CocMenuSel PmenuSel
