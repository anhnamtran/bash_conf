# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

if [ ${BASH_VERSINFO[0]} -lt 5 ]; then
    if [ -f "/usr/local/bin/bash" ]; then
        sudo ln -fs /usr/local/bin/bash /bin/bash
    fi
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE='~:q:exit:quit:~:history:clear:refresh:ls:bg:fg:'

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
# HUGE history
export HISTSIZE=1000000
export HISTFILESIZE=1000000000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
# force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$PS1" -a -z ${ARTOOLS_NOPROMPTMUNGE} ]; then
   PROMPT_COMMAND=__prompt_command
   export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}:"

   # These colors only work if the terminal supports True Color!
   if [ "$color_prompt" = yes ]; then
     bind 'set show-mode-in-prompt on'
     bind 'set vi-cmd-mode-string "\1\033[00;32m\2"'
     bind 'set vi-ins-mode-string "\1\033[00;34m\2"'
     __prompt_command() {
       # Work around to bash-git-prompt to still capture the correct exit code.
       local LAST_COMMAND_STATE=${GIT_PROMPT_LAST_COMMAND_STATE:-$?}
       PS1=""

       local EXIT=${LAST_COMMAND_STATE}
       local COLOR_RESET='\[\033[00m\]'
       local COLOR_RED='\[\033[01;31m\]'
       local COLOR_GREEN='\[\033[01;32m\]'
       local COLOR_YELLOW='\[\033[00;33m\]'
       local COLOR_BLUE='\[\033[01;34m\]'
       local COLOR_PURPLE='\[\033[01;35m\]'

       local TIME=$(date +%H:%M:%S)
       local DIR=$(pwd)

       if [ -d '/src/.repo' ] && [[ $DIR == /src* ]]; then
         DIR="${DIR:1}"
         GITAR_PROMPT_START='gitar@'
         GITAR_PROMPT_END=" ${COLOR_YELLOW}$(agu-minimal current-topic 2> /dev/null)"
       else
          GITAR_PROMPT_START=''
          GITAR_PROMPT_END=''
       fi

       PS1="â†’ ${GITAR_PROMPT_START}${COLOR_RESET}${COLOR_BLUE}${DIR}${GITAR_PROMPT_END}${COLOR_RESET}\n${TIME} "
       PS1+="${COLOR_PURPLE}\u@\h${COLOR_RESET} "

       if [[ $EXIT == 0 ]]; then
         PS1+="${COLOR_GREEN}\$${COLOR_RESET} "
       else
         PS1+="${COLOR_RED}\$${COLOR_RESET} "
       fi
     }
   else
     __prompt_command() {
       PS1='${debian_chroot:+($debian_chroot)}[\u:\W]\[\033[00;33m\]\[\033[00m\]\$ '
     }
   fi
   unset color_prompt force_color_prompt

   # If this is an xterm set the title to user@host:dir
   case "$TERM" in
   xterm*|rxvt*)
       PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
       ;;
   *)
       ;;
   esac
else
   unset PROMPT_COMMAND
   export GIT_PROMPT_DISABLE=1
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Uses custom dircolors
if [ -f ~/.dircolors ]; then
  eval "$(dircolors ~/.dircolors)"
fi

# Enables Z for bash
if [ -f ~/z/z.sh ]; then
  . ~/z/z.sh

  # Populate it with dirs from ~/.z_dirs
  if [ -f ~/.z_dirs ]; then
    > "${_Z_DATA:-$HOME/.z}"
    while read line; do
      [[ -z "$line" ]] || [[ "$line" =~ ^\#.*$ ]] && continue
      _z --add "$line"
    done < ~/.z_dirs
  fi
fi

# PATH additions.
# You may want to put all your additions into a separate file like
# ~/.bash_paths, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_paths ]; then
    . ~/.bash_paths
fi

# ENV variables addition.
# You may want to put all your additions into a separate file like
# ~/.bash_vars, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_vars ]; then
    . ~/.bash_vars
fi

# Function definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_functions, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_functions ]; then
    . ~/.bash_functions
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Bash Git Prompt
if [ -f ~/.bash-git-prompt/gitprompt.sh ]; then
    GIT_PROMPT_ONLY_IN_REPO=1
    GIT_PROMPT_THEME=Custom
    source ~/.bash-git-prompt/gitprompt.sh
fi

# if [[ $- == *i* ]]; then  # check if interactive shell
#    if [ -x "$HOME/bin/nix-enter" ]; then
#       if [ ! -e /nix/var/nix/profiles ] || [ -z ${NIX_ENTER+x} ]; then
#          export NIX_ENTER=""
#          exec "$HOME/bin/nix-enter"
#       fi
#    fi
# fi

# disables silent mode `Ctrl-S`
stty -ixon

# Turn on recursive globbing (enables ** to recurse all directories)
shopt -s globstar
# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

set -o vi
bind -m vi-insert '"q:": vi-movement-mode'
bind -m vi-insert '"jj": vi-movement-mode'
bind -m vi-insert -x '"qq": exit'

# Enables history search using the current characters.
bind -m vi-command '"k": history-search-backward'
bind -m vi-command '"j": history-search-forward'


bind 'set show-all-if-ambiguous on'
bind 'set colored-stats on'
bind 'set visible-stats on'
bind 'set echo-control-characters off'
bind 'TAB:menu-complete'
bind 'set menu-complete-display-prefix on'
bind 'set colored-completion-prefix on'
bind "set completion-map-case on"
bind "set completion-ignore-case on"

# Allows backward movement through menu complete
bind -m vi-insert '"\033[Z": menu-complete-backward'

shopt -qs autocd
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

check_tmux
. "$HOME/.cargo/env"
export PATH="$PATH:$HOME/.spicetify"
